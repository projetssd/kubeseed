#
# A lancer avec un fichier vars
# Ex :
# ansible-playbook ${settings.source}/includes/dockerapps/generique.yml --extra-vars "@${BASEDIR}/includes/dockerapps/vars/calibre.yml"
#

---
- hosts: localhost
  gather_facts: false
  vars:
    host_volumes: []
    container_volumes: []
    type_auth: {}
#  vars_files:
#    - "{{ settings.source }}/includes/dockerapps/templates/generique/generique.yml"


  tasks:
    # PRE TASKS ###################################################################
    - name: Check that pretasks file exists
      stat:
        path: "{{ settings.source }}/includes/dockerapps/pretasks/{{ application }}.yml"
      register: stat_result

    - name: Launch Pretask
      include_tasks: "{{ settings.source }}/includes/dockerapps/pretasks/{{ application }}.yml"
      when: stat_result.stat.exists

    - name: Launch Pretasks from yml
      include_tasks: "{{ settings.source }}/includes/dockerapps/pretasks/{{ item }}.yml"
      with_items: "{{ pretasks }}"
      when: pretasks is defined
        
    # FACTS #######################################################################

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/playbooks/tasks/cloudflare_domain.yml"
      vars:
        subdomain: "{{  applis[application].subdomain}}"


#    - name: Creating paths
#      become: yes
#      file: "path={{item}} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYGID') }}"
#      with_items:
#        - "{{ settings.storage }}/docker/{{ lookup('env','USER') }}/{{application}}"

    - name: Prepare volumes
      include_tasks : "{{ settings.source }}/includes/playbooks/tasks/prepare_volume.yml"
      loop: "{{ application_volumes }}"
      loop_control:
        loop_var: detail_volume

    # DEPLOY ######################################################################
    - name: "Launch {{ application }} - Deployment"
      kubernetes.core.k8s:
        api_version: apps/v1
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        kind: Deployment
        namespace: kubeseed
        name: "{{ application }}"
        definition:
          metadata:
            labels:
              app: "{{ application }}"
          spec:

            replicas: 1
            selector:
              matchLabels:
                app: "{{ application }}"
            template:
              metadata:
                labels:
                  app: "{{ application }}"
              spec:
                containers:
                  - name: "{{ application }}"
                    image: '{{image}}'
                    imagePullPolicy: "Always"
                    ports:
                      - containerPort: "{{ app_port }}"
                    env: "{{ application_env }}"
                    volumeMounts: "{{ container_volumes }}"

                volumes: "{{ host_volumes }}"

    - name: "Launch {{ application }} - Service"
      kubernetes.core.k8s:
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Service
        namespace: kubeseed
        name: "{{ application }}"
        definition:
          spec:
            selector:
              app: "{{ application }}"
            ports:
              - protocol: TCP
                port: "{{ app_port }}"

    - name: "Launch {{ application }} - SPECIFIC Service"
      kubernetes.core.k8s:
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Service
        namespace: kubeseed
        name: "svc-{{ application }}-{{ item }}"
        definition:
          spec:
            type: NodePort
            selector:
              app: "{{ application }}"
            ports:
              - port: "{{ item }}"
                nodePort: "{{ item }}"

      when: specific_container_info.ports is defined
      loop: "{{ specific_container_info.ports }}"

    - name: "Launch {{ application }} - Ingress "
      kubernetes.core.k8s:
        api_version: networking.k8s.io/v1
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Ingress
        namespace: kubeseed
        name: "ing-{{ application }}"
        definition:
          spec:
            rules:
            - host: "{{ applis[application].subdomain }}.{{ user.domain }}"
              http:
                paths:
                  - pathType: Prefix
                    path: "/"
                    backend:
                      service:
                        name: "{{ application }}"
                        port:
                          number: "{{ app_port }}"

    - name: Modify ingress on basic auth
      kubernetes.core.k8s:
        api_version: networking.k8s.io/v1
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Ingress
        namespace: kubeseed
        name: "ing-{{ application }}"
        definition:
          metadata:
            annotations:
              kubernetes.io/ingress.class: traefik
              traefik.ingress.kubernetes.io/router.middlewares: kubeseed-my-basic-auth@kubernetescrd

          spec:
            rules:
              - host: "{{ applis[application].subdomain }}.{{ user.domain }}"
                http:
                  paths:
                    - pathType: Prefix
                      path: "/"
                      backend:
                        service:
                          name: "{{ application }}"
                          port:
                            number: "{{ app_port }}"

      when: applis[application].auth == "basique"


    # POST TASKS ###################################################################

    - name: Launch Posttask from yml
      include_tasks: "{{ settings.source }}/containers/tasks/{{ item }}.yml"
      with_items: "{{ posttasks }}"
      when: posttasks is defined

#    - name: "Insert {{ pgrole}} into database"
#      shell :
#        cmd: |
#          sqlite3 {{  settings.source }}/ssddb << EOF
#              replace into applications (name,status,subdomain,port)
#              values
#              ('{{ pgrole }}',2,'{{sub[pgrole][pgrole] if sub_enabled else pgrole}}',{{ intport }});
#          EOF
