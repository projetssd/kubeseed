---
- hosts: localhost
  gather_facts: false
  vars:
    host_volumes: []
    container_volumes: []
    type_auth: {}
    no_gui: false
  vars_files:
    - "{{ var_file }}"

  tasks:
    # PRE TASKS ###################################################################
    - name: Launch Pretasks from yml
      include_tasks: "{{ settings.source }}/containers/tasks/{{ item }}.yml"
      with_items: "{{ pretasks }}"
      when: pretasks is defined

    # DNS #######################################################################

    - name: "Set DNS Record on CloudFlare"
      include_tasks: "{{ settings.source }}/includes/playbooks/tasks/cloudflare_domain.yml"
      vars:
        subdomain: "{{  applis[application].subdomain }}"
      when: no_gui is false

    # Volumes ###################################################################
    # Prépare un dictionnaire des volumes qui vont être mappés sur le container
    # ce dictionnaire sera appelé lors de la créationd du Deployment
    - name: Prepare volumes
      include_tasks: "{{ settings.source }}/includes/playbooks/tasks/prepare_volume.yml"
      loop: "{{ application_volumes }}"
      loop_control:
        loop_var: detail_volume

    # Specs #######################################################################
    # Prépare un dictionnaire qui sera appelé lors du déploiement
    - name: Prepare specs if liveness
      set_fact:
        specs:
          containers:
            - name: "{{ application }}"
              image: '{{image}}'
              imagePullPolicy: "Always"
              ports:
                - containerPort: "{{ app_port }}"
              env: "{{ application_env }}"
              volumeMounts: "{{ container_volumes }}"
              livenessProbe:
                httpGet:
                  path: /
                  port: "{{ app_port }}"
                initialDelaySeconds: 30
                periodSeconds: 30
          volumes: "{{ host_volumes }}"
      when: no_liveness is not defined

    - name: Prepare specs if NO liveness
      set_fact:
        specs:
          containers:
            - name: "{{ application }}"
              image: '{{image}}'
              imagePullPolicy: "Always"
              ports:
                - containerPort: "{{ app_port }}"
              env: "{{ application_env }}"
              volumeMounts: "{{ container_volumes }}"
          volumes: "{{ host_volumes }}"
      when: no_liveness is defined and no_liveness is true

    # DEPLOY ######################################################################
    # Déploiement : lancement du pod principal
    - name: "Launch {{ application }} - Deployment"
      kubernetes.core.k8s:
        api_version: apps/v1
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        kind: Deployment
        namespace: kubeseed
        name: "{{ application }}"
        definition:
          metadata:
            labels:
              ksapp: "{{ application }}"
              app: "{{ application }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                ksapp: "{{ application }}"
                app: "{{ application }}"
            template:
              metadata:
                labels:
                  ksapp: "{{ application }}"
                  app: "{{ application }}"
              spec: "{{ specs }}"


    # Lancement du service de connexion
    - name: "Launch {{ application }} - Service"
      kubernetes.core.k8s:
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Service
        namespace: kubeseed
        name: "{{ application }}"
        definition:
          metadata:
            labels:
              ksapp: "{{ application }}"
              app: "{{ application }}"
          spec:
            selector:
              ksapp: "{{ application }}"
              app: "{{ application }}"
            ports:
              - protocol: TCP
                port: "{{ app_port }}"

    # Lancement des services spécifiques (équivalent ports pour docker)
    - name: "Launch {{ application }} - SPECIFIC Service"
      kubernetes.core.k8s:
        kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
        state: present
        kind: Service
        namespace: kubeseed
        name: "svc-{{ application }}-{{ item }}"
        definition:
          metadata:
            labels:
              ksapp: "{{ application }}"
              app: "{{ application }}"
          spec:
            type: NodePort
            selector:
              ksapp: "{{ application }}"
              app: "{{ application }}"
            ports:
              - port: "{{ item }}"
                nodePort: "{{ item }}"
      when: specific_container_info.ports is defined
      loop: "{{ specific_container_info.ports }}"

    - name: Block GUI
      block:

      - name: set middleware
        set_fact:
          k3s_middlewares: default-redirect-https@kubernetescrd

      - name: modify middleware if basic auth
        set_fact:
          k3s_middlewares: kubeseed-my-basic-auth@kubernetescrd, default-redirect-https@kubernetescrd
        when: applis[application].auth == 1

      - name: modify middleware if oauth
        set_fact:
          k3s_middlewares: kubeseed-oauth@kubernetescrd, default-redirect-https@kubernetescrd
        when: applis[application].auth == 2

      # Lancement de l'ingress (règle traefik)
      - name: "Launch {{ application }} - Ingress "
        kubernetes.core.k8s:
          api_version: networking.k8s.io/v1
          kubeconfig: "{{ settings.storage }}/k3s/k3s.yaml"
          state: present
          kind: Ingress
          namespace: kubeseed
          name: "ing-{{ application }}"
          definition:
            metadata:
              labels:
                ksapp: "{{ application }}"
                app: "{{ application }}"
              annotations:
                kubernetes.io/ingress.class: traefik
                traefik.ingress.kubernetes.io/router.middlewares: "{{ k3s_middlewares }}"
                cert-manager.io/cluster-issuer: letsencrypt-prod
            spec:
              rules:
                - host: "{{ applis[application].subdomain }}.{{ user.domain }}"
                  http:
                    paths:
                      - pathType: Prefix
                        path: "/"
                        backend:
                          service:
                            name: "{{ application }}"
                            port:
                              number: "{{ app_port }}"
              tls:
                - secretName: "{{ application }}-tls"
                  hosts:

                    - "{{ applis[application].subdomain }}.{{ user.domain }}"
      when: no_gui is false
    # POST TASKS ###################################################################

    - name: Launch Posttask from yml
      include_tasks: "{{ settings.source }}/containers/tasks/{{ item }}.yml"
      with_items: "{{ posttasks }}"
      when: posttasks is defined
